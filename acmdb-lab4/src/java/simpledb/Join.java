package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate predicate;
    private DbIterator child1;
    private DbIterator child2;
    private final int lenTuple1;
    private final int lenTuple2;
    private final ArrayList<Tuple> joinedArray;
    private Iterator<Tuple> joinedIter;
    private final TupleDesc joinedTupleDesc;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
		this.predicate = p;
		this.child1 = child1;
		this.child2 = child2;
		this.lenTuple1 = child1.getTupleDesc().numFields();
		this.lenTuple2 = child2.getTupleDesc().numFields();
		this.joinedTupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
		this.joinedArray = new ArrayList<>();
		this.joinedIter = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return joinedTupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
		super.open();
		child1.open();
		child2.open();

		ArrayList<Tuple> arr2 = new ArrayList<>();
		while (child2.hasNext()) arr2.add(child2.next());

		while (child1.hasNext()){
			Tuple tuple1 = child1.next();
			for(Tuple tuple2 : arr2){
				if (predicate.filter(tuple1, tuple2)){
					Tuple joinedTuple = new Tuple(joinedTupleDesc);
					for(int i = 0; i < lenTuple1; i++) joinedTuple.setField(i, tuple1.getField(i));
					for(int i = 0; i < lenTuple2; i++) joinedTuple.setField(i + lenTuple1, tuple2.getField(i));
					joinedArray.add(joinedTuple);
				}
			}
		}
		joinedIter = joinedArray.iterator();
    }

    public void close() {
		// some code goes here
		super.close();
		child1.close();
		child2.close();
		joinedArray.clear();
		joinedIter = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
		joinedIter = joinedArray.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        return joinedIter.hasNext() ? joinedIter.next() : null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] arr = new DbIterator[2];
        arr[0] = child1;
        arr[1] = child2;
        return arr;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
		child1 = children[0];
		child2 = children[1];
    }

}
